#includepath "~/Documents/;%USERPROFILE%Documents";#include "basiljs/bundle/basil.js";// this script shows how to load data into// basil for further usage.// The document you are working with needs to be saved at least once.// The data needs to be in a folder next to that document// The folder needs to be named "data"// take a look into the output of the JS console of the ESTK/** * calculates a sum of 3 values in an array * @param  {Array} rgb holds [RED, GREEN, BLUE] * @return {Number} a sum of the RGB */function combine(arr) {  return arr[0] + arr[1] + arr[2];}function hexToRGB(hexString){ //convert HEX to RGB          var col = [(parseInt(hexString, 16) >> 16 ) & 0xff, (parseInt(hexString, 16) >> 8 ) & 0xff,    parseInt(hexString, 16 ) & 0xff ];      //b.println(hexString);      //b.println(col);        return col;            } function draw() {  var pw = 250; // for easier handling  var ph = 200; // for easier handling  var doc = b.doc();   doc.documentPreferences.properties = {    pageWidth: pw,    pageHeight: ph  }; // set the page size  b.clear(doc); // clear the doc  b.units(b.MM); // use MM  // get the scripts name  // get its containing folder  // get the name of the script without the extension  // add the .indd to the extension    var fname = File($.fileName).parent.fsName + '/' + ($.fileName.split('/')[$.fileName.split('/').length - 1]).split('.')[0] + '.indd';  // and save it  doc.save(fname, false, 'basil', true); //save the file next to the script  var filecontent = b.loadString("data.json"); // load the text file  //b.println(filecontent.constructor.name); // take a look at what kind of content we have  var json = b.JSON.decode(filecontent); // transform it to JSON  //b.println(json.constructor.name); // take a look again what json is  //b.println(json.description); // print something from the file  // loop all the entries // data conversion  for (var i = 0; i < json.colors.length; i++) {    //b.println(json.colors[i].color); // take a look at the entry    //b.println(json.colors[i].color.length); // how many characters does the entry have    //b.println(json.colors[i].hex);        var rgb = hexToRGB(json.colors[i].hex.slice(1)); // take out the # on the HEXvalue    json.colors[i].rgb = rgb;    json.colors[i].rgbsum = combine(rgb); // // calc a sum (darkest to brightest)       // b.println(json.colors[i].rgbsum);  // take a look at the result  //b.println('updated json');    }    // now sort the array based on the sum        json.colors.sort(function(a, b) {    var value1 = a.rgbsum;    var value2 = b.rgbsum;    if (value1 < value2) {      return -1;    }    if (value1 > value2) {      return 1;    }    return 0;  });    //b.println(json.colors.toSource());          var x = 0;      var y = 0;      var rectWidth = b.width/json.colors.length;      var diam = 6.9;    b.noStroke();            for (var j = 0; j < json.colors.length; j++) {     // b.println(json.colors[j].rgb);    b.fill(json.colors[j].rgb[0], json.colors[j].rgb[1], json.colors[j].rgb[2]); // set fill color        b.ellipseMode(b.CORNER); // To start from the corner of the shape not from the center        myShape = b.ellipse (x,y , diam, diam);// draw the ellipse    myShape.transparencySettings.innerShadowSettings.properties = {    applied: true,    distance: 2  };//inner shadow effect    myShape.transparencySettings.directionalFeatherSettings.properties = {    applied: true,    angle: 0+j,    leftWidth: 2,    rightWidth: 5,  }; //directional Feather effect        //Constraints the pattern    x += diam; // update x    if(x >= b.width){            x = 0;            y+=diam;        }         }  // end of code ---------}b.go();